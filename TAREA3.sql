/*
Gerardo Josue Montoya Amaya
20191002364
*/

SET SERVEROUTPUT ON

/*EJERCICIO #1 BLOQUES ANONIMOS*/
/*A.*/
DECLARE
    CURSOR NS IS
    SELECT FIRST_NAME,LAST_NAME,SALARY
    FROM EMPLOYEES;
    registro NS%ROWTYPE;
BEGIN
        FOR registro in NS LOOP
            IF (registro.FIRST_NAME ='Peter' and registro.LAST_NAME='Tucker' ) THEN
                RAISE_APPLICATION_ERROR(-20010,'no se puede ver el sueldo del jefe');
            else
                  DBMS_OUTPUT.put_line(registro.FIRST_NAME ||' '||REGISTRO.LAST_NAME||':'||registro.SALARY  );
            END IF;
        END LOOP;
END;

/*B.*/

DECLARE
    CURSOR DEPT( DEPT2 DEPARTMENTS.DEPARTMENT_ID%TYPE) IS
    SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES where dept2=department_id GROUP BY department_id ;
    contador integer;
BEGIN
   OPEN DEPT(60);
        FETCH DEPT INTO contador;
        DBMS_OUTPUT.pUT_LINE(contador);  
   CLOSE DEPT;
END;


/*C.*/

DECLARE
    CURSOR EMPL IS
    SELECT SALARY FROM EMPLOYEES FOR UPDATE;
    registro2 EMPL%Rowtype;
BEGIN
       FOR registro2 in EMPL LOOP
            IF(registro2.salary > 8000) THEN
               DBMS_OUTPUT.PUT_LINE('EL NUEVO SALARIO ES: '||((registro2.salary*0.02)+registro2.salary));
            ELSIF(registro2.salary < 8000) THEN
               DBMS_OUTPUT.PUT_LINE('EL NUEVO SALARIO ES: '||((registro2.salary*0.03)+registro2.salary));
            END IF;
       END LOOP;
END;


/*EJERCICIO #2 FUNCIONES*/
CREATE OR REPLACE FUNCTION CREAR_REGION(NR REGIONS.REGION_NAME%TYPE)RETURN NUMBER AS
    REGION_ID2 REGIONS.REGION_ID%TYPE;
    REGION_NAME2 REGIONS.REGION_NAME%TYPE;
BEGIN
    REGION_NAME2:=NR;
    SELECT MAX(REGION_ID) INTO REGION_ID2 FROM REGIONS;
    REGION_ID2:=REGION_ID2+1;
    INSERT INTO REGIONS (REGION_NAME,REGION_ID)
    VALUES(REGION_NAME2,REGION_ID2);
    DBMS_OUTPUT.put_line(REGION_ID2);
    
    IF REGION_NAME2=REGION_NAME2 THEN
        RAISE_APPLICATION_ERROR(-20010,'EL NOMBRE YA ESTA EN USO');
    END IF;
    RETURN REGION_ID2+1;
END;
/
/*LLAMANDO A LA FUNCION*/
DECLARE
    VARS NUMBER;
BEGIN
    VARS:=CREAR_REGION('Oceania');
END;
/
/*LLAMANDO A LA TABLA DE REGIONS*/
SELECT * FROM REGIONS;


/*EJERCICIO #3 PROCEDIMIENTOS*/

/*A.*/

CREATE OR REPLACE PROCEDURE CALCULADORA(TIPO IN NUMBER, NUM1 IN NUMBER, NUM2 IN NUMBER,RESULTADO OUT NUMBER) IS
BEGIN
    CASE
        WHEN TIPO=1 
            THEN 
                RESULTADO:=NUM1+NUM2;
                DBMS_OUTPUT.PUT_LINE('SUMA: '||RESULTADO);
        WHEN TIPO=2 
            THEN 
                RESULTADO:=NUM1-NUM2;
                DBMS_OUTPUT.PUT_LINE('RESTA: '||RESULTADO);
        WHEN TIPO=3 
            THEN 
                RESULTADO:=NUM1*NUM2;
                DBMS_OUTPUT.PUT_LINE('MULTIPLICACION: '||RESULTADO);
        WHEN TIPO=4 
            THEN 
                RESULTADO:=NUM1/NUM2;
                DBMS_OUTPUT.PUT_LINE('DIVISION: '||RESULTADO);
        ELSE 
           RAISE_APPLICATION_ERROR(-20010,'TIPO DE OPERACION INVALIDA, COLOQUE UN VALOR VALIDO PARA TIPO');
    END CASE;
END;
/
DECLARE
    RESUL NUMBER;
BEGIN
    /*ESTRUCTURA DEL PROCEDIMIENTO: CALCULADORA(TIPO DE OPERACION,PRIMER NUMERO,SEGUNDO NUMERO,VARIABLE DE RETORNO)*/
    /*SUMA:1--RESTA:2--MULTIPLICACION:3--DIVISION:4*/
    CALCULADORA(1,5,6,RESUL);
    COMMIT;
END;



/*B.*/
CREATE TABLE EMPLOYEES_COPIA(
        EMPLOYEE_ID NUMBER (6,0) PRIMARY KEY,
        FIRST_NAME VARCHAR2(20 BYTE),
        LAST_NAME VARCHAR2(25 BYTE),
        EMAIL VARCHAR2(25 BYTE),
        PHONE_NUMBER VARCHAR2(20 BYTE),
        HIRE_DATE DATE,
        JOB_ID VARCHAR2(10 BYTE),
        SALARY NUMBER(8,2),
        COMMISSION_PCT NUMBER(2,2),
        MANAGER_ID NUMBER(6,0),
        DEPARTMENT_ID NUMBER(4,0)
);
/
CREATE OR REPLACE PROCEDURE INSERTAR_INFO IS

    EMPLOYEE_ID2 EMPLOYEES_COPIA.EMPLOYEE_ID%TYPE;
    FIRST_NAME2 EMPLOYEES_COPIA.FIRST_NAME%TYPE;
    LAST_NAME2 EMPLOYEES_COPIA.LAST_NAME%TYPE;
    EMAIL2 EMPLOYEES_COPIA.EMAIL%TYPE;
    PHONE_NUMBER2 EMPLOYEES_COPIA.PHONE_NUMBER%TYPE;
    HIRE_DATE2 EMPLOYEES_COPIA.HIRE_DATE%TYPE;
    JOB_ID2 EMPLOYEES_COPIA.JOB_ID%TYPE;
    SALARY2 EMPLOYEES_COPIA.SALARY%TYPE;
    COMMISSION_PCT2 EMPLOYEES_COPIA.COMMISSION_PCT%TYPE;
    MANAGER_ID2 EMPLOYEES_COPIA.MANAGER_ID%TYPE;
    DEPARTMENT_ID2 EMPLOYEES_COPIA.DEPARTMENT_ID%TYPE;
BEGIN
    
        EMPLOYEE_ID2:=&EMPLOYEE_ID2;
        FIRST_NAME2:=&FIRST_NAME2;
        LAST_NAME2:=&LAST_NAME2;
        EMAIL2:=&EMAIL2;
        PHONE_NUMBER2:=&PHONE_NUMBER2;
        HIRE_DATE2:=&HIRE_DATE2;
        JOB_ID2:=&JOB_ID2;
        SALARY2:=&SALARY2;
        COMMISSION_PCT2:=&COMMISSION_PCT2;
        MANAGER_ID2:=&MANAGER_ID2;
        DEPARTMENT_ID2:=&DEPARTMENT_ID2;
        
        IF (EMPLOYEE_ID2= EMPLOYEE_ID) THEN
            RAISE_APPLICATION_ERROR(-20000,'YA EXISTE ALGUIEN CON ESE ID');  
        ELSE  
        INSERT INTO EMPLOYEES_COPIA(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
        VALUES (EMPLOYEE_ID2,FIRST_NAME2,LAST_NAME2,EMAIL2,PHONE_NUMBER2,HIRE_DATE2,JOB_ID2,SALARY2,COMMISSION_PCT2,MANAGER_ID2,DEPARTMENT_ID2);
        DBMS_OUTPUT.PUT_LINE('CARGA FINALIZADA'); 
       END IF;
            
END;
/
EXECUTE INSERTAR_INFO;

SELECT * FROM EMPLOYEES_COPIA;





/*EJERCICIO #4 TRIGGERS*/

/*A.*/

CREATE OR REPLACE TRIGGER TR_INDEPARTMENT
BEFORE INSERT
ON DEPARTMENTS FOR EACH ROW
DECLARE
DEPARTMENTS_ID2 DEPARTMENTS.DEPARTMENT_ID%TYPE;
BEGIN
    CASE
    WHEN DEPARTMENTS_ID2=:NEW.DEPARTMENT_ID THEN
        RAISE_APPLICATION_ERROR(-20000,'MISMO ID');
    ELSE        
        IF :NEW.LOCATION_ID IS NULL THEN
            :NEW.LOCATION_ID:=1700;
        END IF;
                
        IF :NEW.MANAGER_ID IS NULL THEN
            :NEW.MANAGER_ID:=200;
        END IF;
    END CASE;
END;
/
INSERT INTO DEPARTMENTS(DEPARTMENT_ID,DEPARTMENT_NAME) VALUES(280,'IT-DEV');

/*B.*/

CREATE TABLE AUDITORIA (
    USUARIO VARCHAR(50),
    FECHA DATE,
    SALARIO_ANTIGUO NUMBER,
    SALARIO_NUEVO NUMBER
);
/
CREATE OR REPLACE TRIGGER TR_REGIONS_AUDITORIA
BEFORE INSERT ON REGIONS 
BEGIN
    INSERT INTO AUDITORIA VALUES (USER,SYSDATE,0,0); 
END;
/
INSERT INTO REGIONS VALUES(11,'Europa central');

/*C.*/

CREATE OR REPLACE TRIGGER TR_SALARY_EMPLOYEES
BEFORE UPDATE OF SALARY ON EMPLOYEES FOR EACH ROW
BEGIN
    IF :NEW.SALARY<:OLD.SALARY THEN
        RAISE_APPLICATION_ERROR(-20000,'NO SE PUEDE MODIFICAR EL SALARIO CON UN VALOR MENOR');
        ELSE
        INSERT INTO AUDITORIA VALUES(USER,SYSDATE,:OLD.SALARY,:NEW.SALARY);
    END IF;
END;
/
UPDATE EMPLOYEES 
    SET SALARY=25000
WHERE EMPLOYEE_ID=100;




